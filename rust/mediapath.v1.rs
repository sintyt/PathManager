// This file is @generated by prost-build.
/// タイムゾーン保持可能な日時メッセージです。
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Instant {
    /// 1970/1/1 00:00:00からの秒数
    #[prost(int64, tag = "1")]
    pub seconds: i64,
    /// 秒未満のナノ秒
    #[prost(uint32, tag = "2")]
    pub nanos: u32,
    /// タイムゾーンオフセット（秒単位）
    #[prost(int32, tag = "3")]
    pub timezone_offset: i32,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SavePhotoCacheRequest {
    #[prost(enumeration = "RequestMode", tag = "1")]
    pub mode: i32,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SavePhotoCacheResponse {
    #[prost(enumeration = "ResponseStatus", tag = "1")]
    pub status: i32,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LoadPhotoCacheRequest {
    #[prost(enumeration = "RequestMode", tag = "1")]
    pub mode: i32,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LoadPhotoCacheResponse {
    #[prost(enumeration = "ResponseStatus", tag = "1")]
    pub status: i32,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SaveCameraCacheRequest {
    #[prost(enumeration = "RequestMode", tag = "1")]
    pub mode: i32,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SaveCameraCacheResponse {
    #[prost(enumeration = "ResponseStatus", tag = "1")]
    pub status: i32,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LoadCameraCacheRequest {
    #[prost(enumeration = "RequestMode", tag = "1")]
    pub mode: i32,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LoadCameraCacheResponse {
    #[prost(enumeration = "ResponseStatus", tag = "1")]
    pub status: i32,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SaveLogRequest {
    #[prost(enumeration = "RequestMode", tag = "1")]
    pub mode: i32,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SaveLogResponse {
    #[prost(enumeration = "ResponseStatus", tag = "1")]
    pub status: i32,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LoadLogRequest {
    #[prost(enumeration = "RequestMode", tag = "1")]
    pub mode: i32,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LoadLogResponse {
    #[prost(enumeration = "ResponseStatus", tag = "1")]
    pub status: i32,
}
/// フォルダー読み込みリクエストメッセージです。
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReadFolderRequest {
    #[prost(enumeration = "RequestMode", tag = "1")]
    pub mode: i32,
    #[prost(string, tag = "2")]
    pub folder: ::prost::alloc::string::String,
}
/// フォルダー読み込みレスポンスメッセージです。
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReadFolderResponse {
    #[prost(string, repeated, tag = "1")]
    pub folders: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "2")]
    pub files: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// サーバー環境メッセージです。
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Config {
    /// サーバーのURL
    #[prost(string, tag = "1")]
    pub server_url: ::prost::alloc::string::String,
    /// Configファイルのフルパス文字列
    #[prost(string, tag = "2")]
    pub config_file: ::prost::alloc::string::String,
    /// 管理する写真フォルダー
    #[prost(string, tag = "3")]
    pub managed_photo_folder: ::prost::alloc::string::String,
    /// 対象とする画像ファイルの拡張子配列
    /// ex \["jpg", "jpeg", "png"\]
    #[prost(string, repeated, tag = "4")]
    pub photofile_extensions: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// 写真情報ののキャッシュを保存するファイル名
    /// ex. \[managed_photo_folder\]/.cache/photo_cache.json
    #[prost(string, tag = "5")]
    pub photo_cache_file: ::prost::alloc::string::String,
    /// カメラ情報のキャッシュを保存するファイル名
    /// ex. \[managed_photo_folder\]/.cache/camera_cache.json
    #[prost(string, tag = "6")]
    pub camera_cache_file: ::prost::alloc::string::String,
    /// ログファイル名
    /// ex. \[managed_photo_folder\]/.log/log.json
    #[prost(string, tag = "7")]
    pub log_file: ::prost::alloc::string::String,
}
///
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReadConfigRequest {
    #[prost(enumeration = "RequestMode", tag = "1")]
    pub mode: i32,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReadConfigResponse {
    #[prost(message, optional, tag = "1")]
    pub config: ::core::option::Option<Config>,
}
///
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WriteConfigRequest {
    #[prost(enumeration = "RequestMode", tag = "1")]
    pub mode: i32,
    #[prost(message, optional, tag = "2")]
    pub config: ::core::option::Option<Config>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WriteConfigResponse {
    #[prost(enumeration = "ResponseStatus", tag = "1")]
    pub status: i32,
}
/// 写真情報メッセージ
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Photo {
    /// フォルダー及びファイル名に依存しない一意のID
    /// このIDは、ファイル名が変更された場合でも変更されない
    /// カメラのモデル名・SUBSEC含む撮影日時（取得不可はファイルの作成日時）及び
    /// ファイルサイズをハッシュ化したもの
    ///
    /// 一意のID文字列
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// フルパスファイル名
    #[prost(string, tag = "2")]
    pub file: ::prost::alloc::string::String,
    /// ファイルサイズ
    #[prost(uint64, tag = "3")]
    pub size: u64,
    /// 撮影日時
    #[prost(message, optional, tag = "4")]
    pub shot_at: ::core::option::Option<Instant>,
    /// メーカー名
    #[prost(string, tag = "5")]
    pub maker: ::prost::alloc::string::String,
    /// モデル名
    #[prost(string, tag = "6")]
    pub model: ::prost::alloc::string::String,
    /// 推奨フルパスファイル名
    #[prost(string, tag = "7")]
    pub unique_file: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPhotosRequest {
    #[prost(enumeration = "RequestMode", tag = "1")]
    pub mode: i32,
    #[prost(string, tag = "2")]
    pub source_path: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPhotosResponse {
    #[prost(message, repeated, tag = "1")]
    pub photos: ::prost::alloc::vec::Vec<Photo>,
}
///
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MovePhotosRequest {
    #[prost(enumeration = "RequestMode", tag = "1")]
    pub mode: i32,
    #[prost(string, repeated, tag = "2")]
    pub ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
///
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MovePhotosResponse {
    #[prost(enumeration = "ResponseStatus", tag = "1")]
    pub status: i32,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PhotoList {
    #[prost(message, repeated, tag = "1")]
    pub photos: ::prost::alloc::vec::Vec<Photo>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PhotoMap {
    #[prost(map = "string, message", tag = "1")]
    pub by_id: ::std::collections::HashMap<::prost::alloc::string::String, Photo>,
}
/// カメラ情報
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Camera {
    /// メーカー名
    #[prost(string, tag = "1")]
    pub maker: ::prost::alloc::string::String,
    /// モデル名
    #[prost(string, tag = "2")]
    pub model: ::prost::alloc::string::String,
    /// カメラのラベル
    #[prost(string, tag = "3")]
    pub label: ::prost::alloc::string::String,
    /// 撮影された写真の枚数
    #[prost(int32, tag = "4")]
    pub photo_count: i32,
    /// 最初の撮影された写真の日時
    #[prost(message, optional, tag = "5")]
    pub first_at: ::core::option::Option<Instant>,
    /// 最後に撮影された写真の日時
    #[prost(message, optional, tag = "6")]
    pub last_at: ::core::option::Option<Instant>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetCamerasRequest {
    #[prost(enumeration = "RequestMode", tag = "1")]
    pub mode: i32,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCamerasResponse {
    #[prost(message, optional, tag = "1")]
    pub camera_map: ::core::option::Option<CameraMap>,
}
/// Key: カメラモデル名, Value: Camera
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CameraMap {
    #[prost(map = "string, message", tag = "1")]
    pub by_model: ::std::collections::HashMap<::prost::alloc::string::String, Camera>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CameraList {
    #[prost(message, repeated, tag = "1")]
    pub cameras: ::prost::alloc::vec::Vec<Camera>,
}
/// ログのメッセージです。
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Log {
    /// ログ作成日
    #[prost(message, optional, tag = "1")]
    pub created_at: ::core::option::Option<Instant>,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
/// ログリストの汎用メッセージです。
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogList {
    #[prost(message, repeated, tag = "1")]
    pub log: ::prost::alloc::vec::Vec<Log>,
}
/// GetLogのリクエストメッセージです。
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetLogRequest {
    #[prost(enumeration = "RequestMode", tag = "1")]
    pub mode: i32,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetLogResponse {
    #[prost(message, repeated, tag = "1")]
    pub log: ::prost::alloc::vec::Vec<Log>,
}
/// リクエストモードの列挙型です。
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RequestMode {
    DefaultMode = 0,
    /// ファイルから取得、ファイルアクセスありキャッシュの更新
    FileMode = 1,
    /// キャッシュのみ、ファイルアクセスしない
    CacheMode = 2,
    /// テスト用
    TestMode = 3,
}
impl RequestMode {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::DefaultMode => "DEFAULT_MODE",
            Self::FileMode => "FILE_MODE",
            Self::CacheMode => "CACHE_MODE",
            Self::TestMode => "TEST_MODE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DEFAULT_MODE" => Some(Self::DefaultMode),
            "FILE_MODE" => Some(Self::FileMode),
            "CACHE_MODE" => Some(Self::CacheMode),
            "TEST_MODE" => Some(Self::TestMode),
            _ => None,
        }
    }
}
/// レスポンスステータスの列挙型です。
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ResponseStatus {
    /// 正常終了
    StatusOk = 0,
    /// エラー
    StatusError = 1,
}
impl ResponseStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::StatusOk => "STATUS_OK",
            Self::StatusError => "STATUS_ERROR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "STATUS_OK" => Some(Self::StatusOk),
            "STATUS_ERROR" => Some(Self::StatusError),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod mediapath_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct MediapathServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl MediapathServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MediapathServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MediapathServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            MediapathServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        ///
        pub async fn read_folder(
            &mut self,
            request: impl tonic::IntoRequest<super::ReadFolderRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ReadFolderResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mediapath.v1.MediapathService/ReadFolder",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mediapath.v1.MediapathService", "ReadFolder"));
            self.inner.unary(req, path, codec).await
        }
        /// コンフィギュレーションを読み込みます。
        pub async fn read_config(
            &mut self,
            request: impl tonic::IntoRequest<super::ReadConfigRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ReadConfigResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mediapath.v1.MediapathService/ReadConfig",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mediapath.v1.MediapathService", "ReadConfig"));
            self.inner.unary(req, path, codec).await
        }
        /// コンフィギュレーションを保存します。
        pub async fn write_config(
            &mut self,
            request: impl tonic::IntoRequest<super::WriteConfigRequest>,
        ) -> std::result::Result<
            tonic::Response<super::WriteConfigResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mediapath.v1.MediapathService/WriteConfig",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mediapath.v1.MediapathService", "WriteConfig"));
            self.inner.unary(req, path, codec).await
        }
        /// 写真のキャッシュ情報を保存します。
        pub async fn save_photo_cache(
            &mut self,
            request: impl tonic::IntoRequest<super::SavePhotoCacheRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SavePhotoCacheResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mediapath.v1.MediapathService/SavePhotoCache",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("mediapath.v1.MediapathService", "SavePhotoCache"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 写真のキャッシュ情報を読み込みます。
        pub async fn load_photo_cache(
            &mut self,
            request: impl tonic::IntoRequest<super::LoadPhotoCacheRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LoadPhotoCacheResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mediapath.v1.MediapathService/LoadPhotoCache",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("mediapath.v1.MediapathService", "LoadPhotoCache"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// カメラのキャッシュ情報を保存します。
        pub async fn save_camera_cache(
            &mut self,
            request: impl tonic::IntoRequest<super::SaveCameraCacheRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SaveCameraCacheResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mediapath.v1.MediapathService/SaveCameraCache",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("mediapath.v1.MediapathService", "SaveCameraCache"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// カメラのキャッシュ情報を読み込みます。
        pub async fn load_camera_cache(
            &mut self,
            request: impl tonic::IntoRequest<super::LoadCameraCacheRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LoadCameraCacheResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mediapath.v1.MediapathService/LoadCameraCache",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("mediapath.v1.MediapathService", "LoadCameraCache"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// ログを存します。
        pub async fn save_log(
            &mut self,
            request: impl tonic::IntoRequest<super::SaveLogRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SaveLogResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mediapath.v1.MediapathService/SaveLog",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mediapath.v1.MediapathService", "SaveLog"));
            self.inner.unary(req, path, codec).await
        }
        /// ログを読み込みます。
        pub async fn load_log(
            &mut self,
            request: impl tonic::IntoRequest<super::LoadLogRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LoadLogResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mediapath.v1.MediapathService/LoadLog",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mediapath.v1.MediapathService", "LoadLog"));
            self.inner.unary(req, path, codec).await
        }
        /// 写真情報を取得します。
        pub async fn get_photos(
            &mut self,
            request: impl tonic::IntoRequest<super::GetPhotosRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetPhotosResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mediapath.v1.MediapathService/GetPhotos",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mediapath.v1.MediapathService", "GetPhotos"));
            self.inner.unary(req, path, codec).await
        }
        /// 写真を移動します。
        pub async fn move_photos(
            &mut self,
            request: impl tonic::IntoRequest<super::MovePhotosRequest>,
        ) -> std::result::Result<
            tonic::Response<super::MovePhotosResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mediapath.v1.MediapathService/MovePhotos",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mediapath.v1.MediapathService", "MovePhotos"));
            self.inner.unary(req, path, codec).await
        }
        /// カメラ情報を取得します。
        pub async fn get_cameras(
            &mut self,
            request: impl tonic::IntoRequest<super::GetCamerasRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetCamerasResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mediapath.v1.MediapathService/GetCameras",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mediapath.v1.MediapathService", "GetCameras"));
            self.inner.unary(req, path, codec).await
        }
        /// ログを取得します。
        pub async fn get_log(
            &mut self,
            request: impl tonic::IntoRequest<super::GetLogRequest>,
        ) -> std::result::Result<tonic::Response<super::GetLogResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mediapath.v1.MediapathService/GetLog",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mediapath.v1.MediapathService", "GetLog"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod mediapath_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with MediapathServiceServer.
    #[async_trait]
    pub trait MediapathService: std::marker::Send + std::marker::Sync + 'static {
        ///
        async fn read_folder(
            &self,
            request: tonic::Request<super::ReadFolderRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ReadFolderResponse>,
            tonic::Status,
        >;
        /// コンフィギュレーションを読み込みます。
        async fn read_config(
            &self,
            request: tonic::Request<super::ReadConfigRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ReadConfigResponse>,
            tonic::Status,
        >;
        /// コンフィギュレーションを保存します。
        async fn write_config(
            &self,
            request: tonic::Request<super::WriteConfigRequest>,
        ) -> std::result::Result<
            tonic::Response<super::WriteConfigResponse>,
            tonic::Status,
        >;
        /// 写真のキャッシュ情報を保存します。
        async fn save_photo_cache(
            &self,
            request: tonic::Request<super::SavePhotoCacheRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SavePhotoCacheResponse>,
            tonic::Status,
        >;
        /// 写真のキャッシュ情報を読み込みます。
        async fn load_photo_cache(
            &self,
            request: tonic::Request<super::LoadPhotoCacheRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LoadPhotoCacheResponse>,
            tonic::Status,
        >;
        /// カメラのキャッシュ情報を保存します。
        async fn save_camera_cache(
            &self,
            request: tonic::Request<super::SaveCameraCacheRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SaveCameraCacheResponse>,
            tonic::Status,
        >;
        /// カメラのキャッシュ情報を読み込みます。
        async fn load_camera_cache(
            &self,
            request: tonic::Request<super::LoadCameraCacheRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LoadCameraCacheResponse>,
            tonic::Status,
        >;
        /// ログを存します。
        async fn save_log(
            &self,
            request: tonic::Request<super::SaveLogRequest>,
        ) -> std::result::Result<tonic::Response<super::SaveLogResponse>, tonic::Status>;
        /// ログを読み込みます。
        async fn load_log(
            &self,
            request: tonic::Request<super::LoadLogRequest>,
        ) -> std::result::Result<tonic::Response<super::LoadLogResponse>, tonic::Status>;
        /// 写真情報を取得します。
        async fn get_photos(
            &self,
            request: tonic::Request<super::GetPhotosRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetPhotosResponse>,
            tonic::Status,
        >;
        /// 写真を移動します。
        async fn move_photos(
            &self,
            request: tonic::Request<super::MovePhotosRequest>,
        ) -> std::result::Result<
            tonic::Response<super::MovePhotosResponse>,
            tonic::Status,
        >;
        /// カメラ情報を取得します。
        async fn get_cameras(
            &self,
            request: tonic::Request<super::GetCamerasRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetCamerasResponse>,
            tonic::Status,
        >;
        /// ログを取得します。
        async fn get_log(
            &self,
            request: tonic::Request<super::GetLogRequest>,
        ) -> std::result::Result<tonic::Response<super::GetLogResponse>, tonic::Status>;
    }
    #[derive(Debug)]
    pub struct MediapathServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> MediapathServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for MediapathServiceServer<T>
    where
        T: MediapathService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/mediapath.v1.MediapathService/ReadFolder" => {
                    #[allow(non_camel_case_types)]
                    struct ReadFolderSvc<T: MediapathService>(pub Arc<T>);
                    impl<
                        T: MediapathService,
                    > tonic::server::UnaryService<super::ReadFolderRequest>
                    for ReadFolderSvc<T> {
                        type Response = super::ReadFolderResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ReadFolderRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MediapathService>::read_folder(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ReadFolderSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mediapath.v1.MediapathService/ReadConfig" => {
                    #[allow(non_camel_case_types)]
                    struct ReadConfigSvc<T: MediapathService>(pub Arc<T>);
                    impl<
                        T: MediapathService,
                    > tonic::server::UnaryService<super::ReadConfigRequest>
                    for ReadConfigSvc<T> {
                        type Response = super::ReadConfigResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ReadConfigRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MediapathService>::read_config(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ReadConfigSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mediapath.v1.MediapathService/WriteConfig" => {
                    #[allow(non_camel_case_types)]
                    struct WriteConfigSvc<T: MediapathService>(pub Arc<T>);
                    impl<
                        T: MediapathService,
                    > tonic::server::UnaryService<super::WriteConfigRequest>
                    for WriteConfigSvc<T> {
                        type Response = super::WriteConfigResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::WriteConfigRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MediapathService>::write_config(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = WriteConfigSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mediapath.v1.MediapathService/SavePhotoCache" => {
                    #[allow(non_camel_case_types)]
                    struct SavePhotoCacheSvc<T: MediapathService>(pub Arc<T>);
                    impl<
                        T: MediapathService,
                    > tonic::server::UnaryService<super::SavePhotoCacheRequest>
                    for SavePhotoCacheSvc<T> {
                        type Response = super::SavePhotoCacheResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SavePhotoCacheRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MediapathService>::save_photo_cache(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SavePhotoCacheSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mediapath.v1.MediapathService/LoadPhotoCache" => {
                    #[allow(non_camel_case_types)]
                    struct LoadPhotoCacheSvc<T: MediapathService>(pub Arc<T>);
                    impl<
                        T: MediapathService,
                    > tonic::server::UnaryService<super::LoadPhotoCacheRequest>
                    for LoadPhotoCacheSvc<T> {
                        type Response = super::LoadPhotoCacheResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::LoadPhotoCacheRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MediapathService>::load_photo_cache(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = LoadPhotoCacheSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mediapath.v1.MediapathService/SaveCameraCache" => {
                    #[allow(non_camel_case_types)]
                    struct SaveCameraCacheSvc<T: MediapathService>(pub Arc<T>);
                    impl<
                        T: MediapathService,
                    > tonic::server::UnaryService<super::SaveCameraCacheRequest>
                    for SaveCameraCacheSvc<T> {
                        type Response = super::SaveCameraCacheResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SaveCameraCacheRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MediapathService>::save_camera_cache(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SaveCameraCacheSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mediapath.v1.MediapathService/LoadCameraCache" => {
                    #[allow(non_camel_case_types)]
                    struct LoadCameraCacheSvc<T: MediapathService>(pub Arc<T>);
                    impl<
                        T: MediapathService,
                    > tonic::server::UnaryService<super::LoadCameraCacheRequest>
                    for LoadCameraCacheSvc<T> {
                        type Response = super::LoadCameraCacheResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::LoadCameraCacheRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MediapathService>::load_camera_cache(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = LoadCameraCacheSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mediapath.v1.MediapathService/SaveLog" => {
                    #[allow(non_camel_case_types)]
                    struct SaveLogSvc<T: MediapathService>(pub Arc<T>);
                    impl<
                        T: MediapathService,
                    > tonic::server::UnaryService<super::SaveLogRequest>
                    for SaveLogSvc<T> {
                        type Response = super::SaveLogResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SaveLogRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MediapathService>::save_log(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SaveLogSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mediapath.v1.MediapathService/LoadLog" => {
                    #[allow(non_camel_case_types)]
                    struct LoadLogSvc<T: MediapathService>(pub Arc<T>);
                    impl<
                        T: MediapathService,
                    > tonic::server::UnaryService<super::LoadLogRequest>
                    for LoadLogSvc<T> {
                        type Response = super::LoadLogResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::LoadLogRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MediapathService>::load_log(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = LoadLogSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mediapath.v1.MediapathService/GetPhotos" => {
                    #[allow(non_camel_case_types)]
                    struct GetPhotosSvc<T: MediapathService>(pub Arc<T>);
                    impl<
                        T: MediapathService,
                    > tonic::server::UnaryService<super::GetPhotosRequest>
                    for GetPhotosSvc<T> {
                        type Response = super::GetPhotosResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetPhotosRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MediapathService>::get_photos(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetPhotosSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mediapath.v1.MediapathService/MovePhotos" => {
                    #[allow(non_camel_case_types)]
                    struct MovePhotosSvc<T: MediapathService>(pub Arc<T>);
                    impl<
                        T: MediapathService,
                    > tonic::server::UnaryService<super::MovePhotosRequest>
                    for MovePhotosSvc<T> {
                        type Response = super::MovePhotosResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MovePhotosRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MediapathService>::move_photos(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = MovePhotosSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mediapath.v1.MediapathService/GetCameras" => {
                    #[allow(non_camel_case_types)]
                    struct GetCamerasSvc<T: MediapathService>(pub Arc<T>);
                    impl<
                        T: MediapathService,
                    > tonic::server::UnaryService<super::GetCamerasRequest>
                    for GetCamerasSvc<T> {
                        type Response = super::GetCamerasResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetCamerasRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MediapathService>::get_cameras(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetCamerasSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mediapath.v1.MediapathService/GetLog" => {
                    #[allow(non_camel_case_types)]
                    struct GetLogSvc<T: MediapathService>(pub Arc<T>);
                    impl<
                        T: MediapathService,
                    > tonic::server::UnaryService<super::GetLogRequest>
                    for GetLogSvc<T> {
                        type Response = super::GetLogResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetLogRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MediapathService>::get_log(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetLogSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for MediapathServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "mediapath.v1.MediapathService";
    impl<T> tonic::server::NamedService for MediapathServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
